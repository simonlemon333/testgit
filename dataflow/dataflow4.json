{
	"name": "dataflow4",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "source",
						"type": "DatasetReference"
					},
					"name": "Blobsource"
				},
				{
					"dataset": {
						"referenceName": "sinksql",
						"type": "DatasetReference"
					},
					"name": "SinkAsSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sinksql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          age as string,",
				"          hobby as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Blobsource",
				"source(output(",
				"          key as integer,",
				"          active as boolean,",
				"          created as timestamp,",
				"          id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          age as integer,",
				"          hobby as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SinkAsSource",
				"Blobsource, SinkAsSource exists(Blobsource@id == SinkAsSource@id,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          key as integer,",
				"          active as boolean,",
				"          created as timestamp,",
				"          id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          age as integer,",
				"          hobby as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}