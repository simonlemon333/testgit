{
	"name": "dataflow5",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "source",
						"type": "DatasetReference"
					},
					"name": "Blobsource"
				},
				{
					"dataset": {
						"referenceName": "sinksql",
						"type": "DatasetReference"
					},
					"name": "SinkasSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sinksql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "sinksql",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "MaxKey"
				},
				{
					"name": "AddKeyRoot"
				},
				{
					"name": "AddMaxKey"
				},
				{
					"name": "CalculateNewKey"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "GetOldRecords"
				},
				{
					"name": "setactivefalse"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          age as string,",
				"          hobby as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Blobsource",
				"source(output(",
				"          key as integer,",
				"          active as boolean,",
				"          created as timestamp,",
				"          id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          age as integer,",
				"          hobby as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SinkasSource",
				"SinkasSource aggregate(Max_Key = iifNull(max(key), 0)) ~> MaxKey",
				"Blobsource keyGenerate(output(key_root as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddKeyRoot",
				"AddKeyRoot, MaxKey join(and(not(isNull(id)),not(isNull(Max_Key))),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> AddMaxKey",
				"AddMaxKey derive(key = toInteger(add(key_root,Max_Key))) ~> CalculateNewKey",
				"CalculateNewKey derive(active = true(),",
				"          created = currentUTC()) ~> derivedColumn1",
				"Blobsource, SinkasSource join(and(Blobsource@id==SinkasSource@id,active==true()),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> GetOldRecords",
				"GetOldRecords derive(active = false()) ~> setactivefalse",
				"setactivefalse alterRow(updateIf(true())) ~> alterRow1",
				"derivedColumn1 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          key as integer,",
				"          active as boolean,",
				"          created as timestamp,",
				"          id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          age as integer,",
				"          hobby as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          key as integer,",
				"          active as boolean,",
				"          created as timestamp,",
				"          id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          age as integer,",
				"          hobby as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}