{
	"name": "dataflow9",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PeopleInput",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Peopleoutput",
						"type": "DatasetReference"
					},
					"name": "sql"
				},
				{
					"dataset": {
						"referenceName": "badRecords",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          first_name as string,",
				"          last_name as string,",
				"          age as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(length(first_name)<=5,",
				"     disjoint: false) ~> split1@(Goodrecords, Badrecords)",
				"split1@Goodrecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          first_name as string,",
				"          last_name as string,",
				"          age as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sql",
				"split1@Badrecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Peoplebadrecords.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}